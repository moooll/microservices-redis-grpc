// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfitAndLossClient is the client API for ProfitAndLoss service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfitAndLossClient interface {
	GetProfitAndLoss(ctx context.Context, in *ProfitAndLossRequest, opts ...grpc.CallOption) (*ProfitAndLossResponse, error)
}

type profitAndLossClient struct {
	cc grpc.ClientConnInterface
}

func NewProfitAndLossClient(cc grpc.ClientConnInterface) ProfitAndLossClient {
	return &profitAndLossClient{cc}
}

func (c *profitAndLossClient) GetProfitAndLoss(ctx context.Context, in *ProfitAndLossRequest, opts ...grpc.CallOption) (*ProfitAndLossResponse, error) {
	out := new(ProfitAndLossResponse)
	err := c.cc.Invoke(ctx, "/ProfitAndLoss/GetProfitAndLoss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfitAndLossServer is the server API for ProfitAndLoss service.
// All implementations must embed UnimplementedProfitAndLossServer
// for forward compatibility
type ProfitAndLossServer interface {
	GetProfitAndLoss(context.Context, *ProfitAndLossRequest) (*ProfitAndLossResponse, error)
	mustEmbedUnimplementedProfitAndLossServer()
}

// UnimplementedProfitAndLossServer must be embedded to have forward compatible implementations.
type UnimplementedProfitAndLossServer struct {
}

func (UnimplementedProfitAndLossServer) GetProfitAndLoss(context.Context, *ProfitAndLossRequest) (*ProfitAndLossResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfitAndLoss not implemented")
}
func (UnimplementedProfitAndLossServer) mustEmbedUnimplementedProfitAndLossServer() {}

// UnsafeProfitAndLossServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfitAndLossServer will
// result in compilation errors.
type UnsafeProfitAndLossServer interface {
	mustEmbedUnimplementedProfitAndLossServer()
}

func RegisterProfitAndLossServer(s grpc.ServiceRegistrar, srv ProfitAndLossServer) {
	s.RegisterService(&ProfitAndLoss_ServiceDesc, srv)
}

func _ProfitAndLoss_GetProfitAndLoss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfitAndLossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitAndLossServer).GetProfitAndLoss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProfitAndLoss/GetProfitAndLoss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitAndLossServer).GetProfitAndLoss(ctx, req.(*ProfitAndLossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfitAndLoss_ServiceDesc is the grpc.ServiceDesc for ProfitAndLoss service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfitAndLoss_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProfitAndLoss",
	HandlerType: (*ProfitAndLossServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfitAndLoss",
			Handler:    _ProfitAndLoss_GetProfitAndLoss_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/position.proto",
}
